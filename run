#!/bin/bash -e

set -o pipefail

################################################################################

has() { hash "$1" &> /dev/null ; }

use_netcore() {
  if ! has dotnet ; then return 1 ; fi

  USE=netcore
  if has mono ; then
    RUN=mono
  else
    RUN=
  fi
}

use_mono() {
  if ! has xbuild ; then return 1 ; fi

  USE=mono

  BUILD=xbuild
  RUN=mono
  if has fsharpiAnyCpu ; then
    FSI=fsharpiAnyCpu
  else
    FSI=fsharpi
  fi
}

use_net() {
  if ! has msbuild.exe ; then return 1 ; fi

  USE=net

  BUILD="msbuild.exe /maxcpucount"
  RUN=
  FSI=fsianycpu.exe
}

no_build_cmd() {
  echo "Couldn't find build command."
  return 1
}

case "$USE" in
  netcore) use_netcore ;;
  mono)    use_mono ;;
  net)     use_net ;;
  *)       use_net || use_netcore || use_mono ;;
esac || no_build_cmd

################################################################################

did() {
  local VAR=DID_$1
  if [ -z "${!VAR}" ] ; then
    eval "$VAR=1"
    return 1
  else
    return 0
  fi
}

equals() {
  if [ -f "$1" ] && [ -f "$2" ] ; then
    diff -q "$1" "$2" > /dev/null
  else
    return 1
  fi
}

overwrite_changed() {
  cat > .tmp
  if ! equals .tmp "$1" ; then
    cp .tmp "$1"
  fi
  rm .tmp
}

check_git_clean() {
  local BRANCH
  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ "master" != "$BRANCH" ] ; then
    echo "Have you merged your changes to master? (currently on $BRANCH)"
    return 1
  fi

  local CHANGES
  CHANGES="$(git status --porcelain)"
  if [ "" != "$CHANGES" ] ; then
    echo "Have you committed all local changes?

Changes:
$CHANGES"
    return 1
  fi

  local BEHIND
  BEHIND="$(git rev-list --count '@{upstream}..HEAD')"
  if [ "0" != "$BEHIND" ] ; then
    echo "Have you pushed everything to upstream? ($BEHIND commits behind upstream)"
    return 1
  fi
}

PAKET=.paket/paket.exe

paket_bootstrap() {
  if did paket_bootstrap ; then return 0 ; fi
  $RUN .paket/paket.bootstrapper.exe -s --max-file-age=60
  if [ ! -x $PAKET ] ; then
    chmod +x $PAKET
  fi
}

paket() {
  paket_bootstrap
  $RUN $PAKET "$@"
}

dotnet-quiet() {
  sed -e '/^Project .* was previously compiled\. Skipping compilation\.$/d'           \
      -e '/^Project .* will be compiled because Input items added from last build$/d' \
      -e '/^Project .* will be compiled because dependencies changed$/d'              \
      -e '/^Project .* will be compiled because expected outputs are missing$/d'      \
      -e '/^Project .* will be compiled because inputs were modified$/d'              \
      -e '/^ *$/d'                                                                    \
      -e '/^Compiling .* for .*$/d'                                                   \
      -e '/^Compilation succeeded\.$/d'                                               \
      -e '/^ *0 *Warning(s) *$/d'                                                     \
      -e '/^ *0 *Error(s) *$/d'                                                       \
      -e '/^ *Time elapsed [0-9:.]*$/d'
}

################################################################################

PROJECT_URL="https://github.com/Hopac/Hopac"
SUMMARY="A library for Higher-Order, Parallel, Asynchronous and Concurrent programming in F#."
DESCRIPTION="Inspired by languages like Concurrent ML and Cilk, Hopac is a library for F# with the aim of making it easier to write efficient parallel, asynchronous, concurrent and reactive programs. Hopac is licensed under a MIT-style license. See project website for further information."
COMPANY="Housemarque Inc."
COPYRIGHT="Â© $COMPANY"
TAGS="f#, fsharp, parallel, async, concurrent, reactive"
LICENSE_URL="$PROJECT_URL/blob/master/LICENSE.md"
ICON_URL="https://avatars2.githubusercontent.com/u/10173903"

################################################################################

if [ -n "$HOPAC_STRONG_NAME" ] ; then
  KEYFILE="../../Hopac.snk"
  PUBLICKEY="0024000004800000140100000602000000240000525341310008000011000000934bdab527f7c1b75f64288d92ffc72e2cdba9823589c12f246bcb15f6873124bf501cc1b90c1166881c41b2e871617e6a9e5bd45a95989a9e71b37fd3f6c85f589a1cd70a76ad7f9206bcc96497bef5e73820ca2f304c6c918faf9317f65dcc3fc6b7a8dac0d1c2dfa33df5475fd6a8a1c59be83c3f6a000e6f5590a632ef06a54f25874d96c8eac1754e1c384d120e64242e080da9b4c241e498890e40d36f56ca962adc11a06e3f0906344a6dbdc42ca489ea71ae837616aaf8c5e98d6a26ed7b3cf0d6842ffeb0eb528fc9c006f9cfbd3097564e14ae8491e3ffabeaffa04376b6f53fa56936471c2a0919542984f5e401984cd359cf80d7b3f5f6520689"
  NUPKG_ID="Hopac.StrongName"
else
  KEYFILE=""
  PUBLICKEY=""
  NUPKG_ID="Hopac"
fi

################################################################################

VERSION="$(grep -e '^#### ' RELEASE_NOTES.md   |
           sed -e 's/^#### *\([^ ]*\) .*/\1/g' |
           head -n 1)"

N="$(grep -n -e '^####' RELEASE_NOTES.md |
     sed -e 's#^\([0-9]*\).*$#\1#g'      |
     head -n 2                           |
     tail -n 1)"

NOTES="$(head -n $((N-1)) RELEASE_NOTES.md |
         sed -e 's#^\(.*\)$#    \1#g'      |
         tail -n $((N-2)))"

################################################################################

if [ -z "$SOLUTIONS" ] ; then
  if [ "$USE" = net ] ; then
    SOLUTIONS="Hopac.sln Todo.sln"
  else
    SOLUTIONS="Hopac.sln"
  fi
fi

if [ -z "$CONFIGS" ] ; then
  CONFIGS="Debug Release"
fi

################################################################################

clean() {
  if did clean ; then return 0 ; fi

  for KIND in Libs Benchmarks Tests Examples ; do
    find $KIND -name bin -print0 | xargs -0 rm -rf
    find $KIND -name obj -print0 | xargs -0 rm -rf
  done

  rm -rf .dotnet
  rm -rf .gh-pages
  rm -rf .nuget
  rm -rf .paket/paket.exe
  rm -rf packages
}

restore() {
  if did restore ; then return 0 ; fi

  echo "Restoring dependencies"

  if [ "$USE" = netcore ] ; then
    local NEW_CHECKSUM
    if has md5 ; then
      SUM=md5
    elif has md5sum ; then
      SUM=md5sum
    else
      echo "Couldn't find command to compute MD5."
      return 1
    fi
    NEW_CHECKSUM="$(find . -name 'project.json' -print0 | xargs -0 cat | $SUM)"
    local OLD_CHECKSUM=""
    if [ -f .dotnet ] ; then OLD_CHECKSUM="$(cat .dotnet)" ; fi
    if [ "$NEW_CHECKSUM" != "$OLD_CHECKSUM" ] ; then
      echo -n "$NEW_CHECKSUM" > .dotnet
      dotnet restore --verbosity Warning
    fi
  else
    paket --silent restore
  fi
}

attrs() {
  local ATTRS="AssemblyTitleAttribute(\"$1\")
AssemblyProductAttribute(\"$1\")
AssemblyDescriptionAttribute(\"$SUMMARY\")
AssemblyVersionAttribute(\"$VERSION\")
AssemblyFileVersionAttribute(\"$VERSION\")
AssemblyCompanyAttribute(\"$COMPANY\")
AssemblyCopyrightAttribute(\"$COPYRIGHT\")
"

  if [ "$LIB" = "Hopac.Core" ] ; then
    if [ -n "$PUBLICKEY" ] ; then
      PUBLICKEY_OPT=", PublicKey=$PUBLICKEY"
    else
      PUBLICKEY_OPT=""
    fi

    ATTRS="InternalsVisibleToAttribute(\"Hopac$PUBLICKEY_OPT\")
InternalsVisibleToAttribute(\"Hopac.Platform$PUBLICKEY_OPT\")
$ATTRS"
  fi

  if [ -n "$KEYFILE" ] ; then
    ATTRS="AssemblyKeyFileAttribute(\"$KEYFILE\")
$ATTRS"
  fi

  echo -n "$ATTRS"
}

generate_infos() {
  if did generate_infos ; then return 0 ; fi

  for LIB in Hopac Hopac.Platform ; do
    overwrite_changed Libs/$LIB/AssemblyInfo.fs <<EOF
// NOTE: This is a generated file.

namespace System

open System.Reflection

$(attrs $LIB | sed -e 's#^#[<assembly: #g' -e 's#$#>]#g')

do ()
EOF
  done

  for LIB in Hopac.Core ; do
    overwrite_changed Libs/$LIB/AssemblyInfo.cs <<EOF
// NOTE: This is a generated file.

using System.Reflection;
using System.Runtime.CompilerServices;

$(attrs $LIB | sed -e 's#^#[assembly: #g' -e 's#$#]#g')
EOF
  done
}

update_versions() {
  pushd Libs &> /dev/null
  for LIB in Hopac Hopac.Core Hopac.Platform ; do
    JSON="$LIB/project.json"
    sed -e '1,/"version": *"[^"]*"/ s/"version": *"[^"]*"/"version": "'"$VERSION"'"/' "$JSON" | overwrite_changed "$JSON"
  done
  popd &> /dev/null
}

build() {
  if did build ; then return 0 ; fi

  generate_infos
  update_versions

  restore

  if [ "$USE" = netcore ] ; then
    for PROJECT in $(find . -name "project.json") ; do
      pushd "$(dirname "$PROJECT")" &> /dev/null
      for CONFIG in $CONFIGS ; do
        echo "Building $(basename "$(dirname "$PROJECT")") in $CONFIG"
        dotnet build -c "$CONFIG" | dotnet-quiet
      done
      popd &> /dev/null
    done
  else
    for SOLUTION in $SOLUTIONS ; do
      for CONFIG in $CONFIGS ; do
        echo "Building $SOLUTION in $CONFIG"
        $BUILD /nologo /verbosity:quiet /p:Configuration="$CONFIG" "$SOLUTION"
      done
    done
  fi
}

build_net_nupkg() {
  if did build_net_nupkg ; then return 0 ; fi

  if [ "$USE" = netcore ] ; then
    echo "This script cannot build .NET nupkg on .NET Core."
    return 1
  fi

  CONFIGS=Release build

  mkdir -p .nuget
  local TEMPLATE=.nuget/Hopac.template
  overwrite_changed "$TEMPLATE" <<EOF
type file
id $NUPKG_ID
version $VERSION
summary $SUMMARY
description $DESCRIPTION
copyright Copyright 2015
authors $COMPANY
owners $COMPANY
tags $TAGS
projectUrl $PROJECT_URL
iconUrl $ICON_URL
licenseUrl $LICENSE_URL
releaseNotes
$NOTES
files
    ../Libs/Hopac.Core/bin/Release/Hopac.Core.???             ==> lib/net45
    ../Libs/Hopac.Core/bin/Release/Hopac.Core.???.???         ==> lib/net45
    ../Libs/Hopac/bin/Release/Hopac.???                       ==> lib/net45
    ../Libs/Hopac/bin/Release/Hopac.???.???                   ==> lib/net45
    ../Libs/Hopac.Platform/bin/Release/Hopac.Platform.???     ==> lib/net45
    ../Libs/Hopac.Platform/bin/Release/Hopac.Platform.???.??? ==> lib/net45
dependencies FSharp.Core >= 3.1.2.5
EOF

  paket --silent pack output .nuget templatefile "$TEMPLATE"
}

fixup_nupkg() {
  local NUPKG="Hopac.$VERSION.nupkg"

  pushd .nuget &> /dev/null

  unzip "$NUPKG" Hopac.nuspec
  chmod +rw Hopac.nuspec

  local NETCORE_DEPS
  NETCORE_DEPS="$(sed -e '1,/<.group>/d' -e '/Hopac/d' Hopac.nuspec | grep dependency | sort | uniq)"

  local NETCORE_GROUP
  NETCORE_GROUP="$(grep -e '<group ' Hopac.nuspec | head -n 1)"

  local NET_DEPS
  NET_DEPS="$(sed -e '/<.group>/,$d' Hopac.nuspec | grep dependency)"

  local PREFIX
  PREFIX="$(sed -e '/<dependencies>/,$d' Hopac.nuspec)"
  local SUFFIX
  SUFFIX="$(sed -e '1,/<.dependencies>/d' Hopac.nuspec)"

  echo "$PREFIX"             >  Hopac.nuspec
  echo "    <dependencies>"  >> Hopac.nuspec
  echo "      <group>"       >> Hopac.nuspec
  echo "$NET_DEPS"           >> Hopac.nuspec
  echo "      </group>"      >> Hopac.nuspec
  echo "$NETCORE_GROUP"      >> Hopac.nuspec
  echo "$NETCORE_DEPS"       >> Hopac.nuspec
  echo "      </group>"      >> Hopac.nuspec
  echo "    </dependencies>" >> Hopac.nuspec
  echo "$SUFFIX"             >> Hopac.nuspec

  zip -u "$NUPKG" Hopac.nuspec

  rm -rf .tmp
  unzip -d .tmp "$NUPKG"
  rm "$NUPKG"
  pushd .tmp &> /dev/null
  find . -type f -print0 | xargs -0 chmod 0666
  find . -type f -print0 | xargs -0 zip "../$NUPKG"
  popd &> /dev/null

  popd &> /dev/null
}

merge_netcore_nupkgs() {
  if did merge_netcore_nupkgs ; then return 0 ; fi

  if [ "$USE" != netcore ] ; then
    echo "This script can only build .NET Core nupkg when using .NET Core."
    return 1
  fi

  local NUPKG=".nuget/Hopac.$VERSION.nupkg"

  if [ ! -f "$NUPKG" ] ; then
    echo "This script can only merge .NET Core nupkgs when .NET nupkg has already been built."
    return 1
  fi

  CONFIGS=Release build

  for LIB in Hopac Hopac.Core Hopac.Platform ; do
    pushd Libs/$LIB &> /dev/null
    dotnet pack --configuration Release --no-build

    dotnet mergenupkg --source "../../$NUPKG" --other "bin/Release/$LIB.$VERSION.nupkg" --framework netstandard1.6
    popd  &> /dev/null
  done

  fixup_nupkg
}

build_nupkg() {
  if did build_nupkg ; then return 0 ; fi

  rm -rf .nuget

  if has msbuild.exe ; then
    USE=net  ./run build_net_nupkg
  elif has xbuild ; then
    USE=mono ./run build_net_nupkg
  else
    echo "Mono or .NET required to build nupkg."
  fi

  if has dotnet ; then
    USE=netcore ./run merge_netcore_nupkgs
  else
    echo ".NET Core required to build nupkg."
    return 1
  fi
}

generate_docs() {
  if did generate_docs ; then return 0 ; fi

  if [ ! -d .gh-pages ] ; then
    git clone -b gh-pages "$PROJECT_URL" .gh-pages
  fi

  ./FsiRefGen/run                  \
      --out .gh-pages              \
      --name Hopac                 \
      --icon "$ICON_URL"           \
      --version "$VERSION"         \
      --project-url "$PROJECT_URL" \
      --                           \
      Libs/Hopac/Hopac.fsi         \
      Libs/Hopac/Stream.fsi        \
      Libs/Hopac/TopLevel.fsi
}

run() {
  local PROJECT="$1"
  local CONFIG="$2"

  if [ ! -d "$PROJECT" ] ; then return 0 ; fi

  pushd "$PROJECT" &> /dev/null
  echo "Running $PROJECT in $CONFIG"
  if [ "$USE" = netcore ] ; then
    dotnet run -c "$CONFIG" | dotnet-quiet
  else
    $RUN "./bin/$CONFIG/$PROJECT.exe"
  fi
  echo
  popd &> /dev/null
}

tests() {
  if did tests ; then return 0 ; fi

  build

  pushd Tests &> /dev/null
  for CONFIG in $CONFIGS ; do
    for TEST in * ; do
      run "$TEST" "$CONFIG"
    done
  done
  popd &> /dev/null
}

publish_docs() {
  if did publish_docs ; then return 0 ; fi

  generate_docs

  pushd .gh-pages
  mkdir -p "$VERSION"
  cp ./*.html ./*.css ./*.js "$VERSION"/
  git add "$VERSION"/*
  git add ./*.html ./*.css ./*.js
  git commit -m "Updated docs for $VERSION"
  git push
  popd
}

publish_nupkg() {
  if did publish_nupkg ; then return 0 ; fi

  build_nupkg

  paket push url https://www.nuget.org file ".nuget/Hopac.$VERSION.nupkg"
}

tag_release() {
  if did tag_release ; then return 0 ; fi

  git tag -a "$VERSION" -m "$VERSION"
  git push --follow-tags
}

check_release_date() {
  local RELEASE_DATE
  RELEASE_DATE="$(head -n 1 RELEASE_NOTES.md | sed -e 's#.* \(.*-.*-.*\)$#\1#g')"
  local CURRENT_DATE
  CURRENT_DATE="$(date '+%Y-%m-%d')"

  if [ "$RELEASE_DATE" != "$CURRENT_DATE" ] ; then
    echo "Release notes specify date as $RELEASE_DATE, but current date is $CURRENT_DATE."
    return 1
  fi
}

publish() {
  CONFIGS=Release

  if did publish ; then return 0 ; fi

  check_git_clean

  clean
  generate_docs
  build_nupkg
  tests

  check_git_clean

  if [ -z "$KEYFILE" ] ; then
    cat <<EOF

You are about to publish Hopac.

Version: $VERSION

Release notes:
$NOTES

EOF
    check_release_date

    read -r -p "Enter Y to proceed: " INPUT
    if [ "$INPUT" != "Y" ] ; then
      return 1
    fi

    publish_nupkg
    publish_docs
    tag_release
  else
    echo
    echo "You may publish .nuget/$NUPKG_ID.$VERSION.nupkg manually."
  fi
}

repl() {
  if [ "$USE" = netcore ] ; then
    if has fsianycpu.exe ; then
      echo "Running repl on net."
      USE=net ./run repl
    elif has mono ; then
      echo "Running repl on mono."
      USE=mono ./run repl
    else
      echo "Cannot start repl on netcore."
      return 1
    fi
  else
    SOLUTIONS=Hopac.sln
    CONFIGS=Release
    build

    $FSI                  \
      --optimize+         \
      --tailcalls+        \
      --crossoptimize+    \
      --use:Hopac.fsx
  fi
}

benchmarks() {
  SOLUTIONS=Hopac.sln
  CONFIGS=Release
  build

  pushd Benchmarks &> /dev/null
  for BENCHMARK in * ; do
    run "$BENCHMARK" Release
  done
  popd &> /dev/null
}

pull_submodules() {
  git submodule foreach git pull origin master
}

watch() {
  echo "watch: $*"

  fswatch --latency 2                \
          -0                         \
          --exclude '.*#.*'          \
          --exclude '.*/bin.*'       \
          --exclude '.*/obj.*'       \
          --exclude '.*\.lock\.json' \
          --exclude '.*\.proj'       \
          --exclude '\.dotnet'       \
          --exclude '\.gh-pages.*'   \
          --exclude '\.git.*'        \
          --exclude '\.nuget.*'      \
          --exclude '\.paket.*'      \
          --exclude '\.tmp.*'        \
          --exclude 'packages.*'     \
          --exclude 'run'            \
          .                          \
  | nice xargs -0 -t -n 1 -I {} ./run $*

  exit
}

################################################################################

while [ $# != 0 ] ; do
  COMMAND="$1"
  shift
  case "$COMMAND" in
    -x)                   set -x ;;
    benchmarks)           benchmarks ;;
    build)                build ;;
    build_net_nupkg)      build_net_nupkg ;;
    build_nupkg)          build_nupkg ;;
    clean)                clean ;;
    generate_docs)        generate_docs ;;
    merge_netcore_nupkgs) merge_netcore_nupkgs ;;
    publish)              publish ;;
    publish_docs)         publish_docs ;;
    pull_submodules)      pull_submodules ;;
    repl)                 repl ;;
    restore)              restore ;;
    tests)                tests ;;
    watch)                watch "$@" ;;
    *)
      echo "Unknown command: '$COMMAND'

If you are using Bash, you can execute

  source run.complete

to get autocompletion for this script."
      exit 1
      ;;
  esac
done
